import React from "react";
import { useForm } from "react-hook-form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { toast } from "sonner"; // for success message after submission

const categories = ["Succulent", "Fern", "Flowering", "Herb", "Cactus", "Palm"];
const careLevels = ["Easy", "Moderate", "Difficult"];

const AddPlants = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm();

  const onSubmit = (data) => {
    // Replace with your database/post logic
    console.log(data);
    toast.success("Plant added successfully!");
  };

  return (
    <div className="p-24">
      <div className="p-12 text-center space-y-4">
        <h1 className="text-4xl font-medium">Add Plants</h1>
        <p>
          We want to empower you to keep your plants alive! Our at-a-glance
          printable plant care guides make it easy to remember what each plant
          needs.
        </p>
      </div>

      <form
        onSubmit={handleSubmit(onSubmit)}
        className="grid grid-cols-1 sm:grid-cols-2 gap-6"
      >
        {/* Image Upload */}
        <div className="sm:col-span-2">
          <label className="block mb-1 font-medium">Image</label>
          <Input
            type="file"
            accept="image/*"
            {...register("image", { required: true })}
          />
          {errors.image && (
            <span className="text-red-600">Image is required</span>
          )}
        </div>

        {/* Plant Name */}
        <div>
          <label className="block mb-1 font-medium">Plant Name</label>
          <Input
            {...register("name", { required: true })}
            placeholder="Enter plant name"
          />
          {errors.name && (
            <span className="text-red-600">Name is required</span>
          )}
        </div>

        {/* Category Dropdown */}
        <div>
          <label className="block mb-1 font-medium">Category</label>
          <Select
            {...register("category", { required: true })}
            onValueChange={(val) =>
              document.querySelector("input[name='category']").value = val
            }
          >
            <SelectTrigger>
              <SelectValue placeholder="Select category" />
            </SelectTrigger>
            <SelectContent>
              {categories.map((cat) => (
                <SelectItem key={cat} value={cat}>
                  {cat}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <input
            type="hidden"
            {...register("category", { required: true })}
            name="category"
          />
          {errors.category && (
            <span className="text-red-600">Category is required</span>
          )}
        </div>

        {/* Description */}
        <div className="sm:col-span-2">
          <label className="block mb-1 font-medium">Description</label>
          <Textarea
            {...register("description", { required: true })}
            rows={4}
            placeholder="Describe the plant"
          />
          {errors.description && (
            <span className="text-red-600">Description is required</span>
          )}
        </div>

        {/* Care Level */}
        <div>
          <label className="block mb-1 font-medium">Care Level</label>
          <Select
            {...register("careLevel", { required: true })}
            onValueChange={(val) =>
              document.querySelector("input[name='careLevel']").value = val
            }
          >
            <SelectTrigger>
              <SelectValue placeholder="Select level" />
            </SelectTrigger>
            <SelectContent>
              {careLevels.map((level) => (
                <SelectItem key={level} value={level}>
                  {level}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <input
            type="hidden"
            {...register("careLevel", { required: true })}
            name="careLevel"
          />
          {errors.careLevel && (
            <span className="text-red-600">Care Level is required</span>
          )}
        </div>

        {/* Watering Frequency */}
        <div>
          <label className="block mb-1 font-medium">Watering Frequency</label>
          <Input
            {...register("wateringFrequency", { required: true })}
            placeholder="e.g., Every 3 days"
          />
          {errors.wateringFrequency && (
            <span className="text-red-600">Frequency is required</span>
          )}
        </div>

        {/* Last Watered */}
        <div>
          <label className="block mb-1 font-medium">Last Watered</label>
          <Input
            type="date"
            {...register("lastWatered", { required: true })}
          />
          {errors.lastWatered && (
            <span className="text-red-600">Last watered date is required</span>
          )}
        </div>

        {/* Next Watering */}
        <div>
          <label className="block mb-1 font-medium">Next Watering</label>
          <Input
            type="date"
            {...register("nextWatering", { required: true })}
          />
          {errors.nextWatering && (
            <span className="text-red-600">
              Next watering date is required
            </span>
          )}
        </div>

        {/* Health Status */}
        <div>
          <label className="block mb-1 font-medium">Health Status</label>
          <Input
            {...register("healthStatus", { required: true })}
            placeholder="e.g., Healthy, Needs attention"
          />
          {errors.healthStatus && (
            <span className="text-red-600">Health status is required</span>
          )}
        </div>

        {/* User Email */}
        <div>
          <label className="block mb-1 font-medium">Your Email</label>
          <Input
            type="email"
            {...register("userEmail", { required: true })}
            placeholder="your@example.com"
          />
          {errors.userEmail && (
            <span className="text-red-600">Email is required</span>
          )}
        </div>

        {/* User Name */}
        <div>
          <label className="block mb-1 font-medium">Your Name</label>
          <Input
            {...register("userName", { required: true })}
            placeholder="Your name"
          />
          {errors.userName && (
            <span className="text-red-600">Name is required</span>
          )}
        </div>

        {/* Submit Button */}
        <div className="sm:col-span-2">
          <Button type="submit" className="w-full mt-4">
            Add Plant
          </Button>
        </div>
      </form>
    </div>
  );
};

export default AddPlants;
